# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

services:
    resource.user:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\User" ]
        calls:
            -      method:    "initNormalizationContext"
                   arguments: [ { groups: [ "user_read" ] } ]
            -      method:    "initDenormalizationContext"
                   arguments: [ { groups: [ "user_write" ] } ]
        tags:      [ { name: "api.resource" } ]
        
    resource.retailer:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\Retailer" ]
        tags:      [ { name: "api.resource" } ]

    resource.package:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\Package" ]
        tags:      [ { name: "api.resource" } ]
        
    resource.store:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\Store" ]
        calls:
            -      method:    "initNormalizationContext"
                   arguments: [ { groups: [ "store" ] } ]
            -      method:    "initDenormalizationContext"
                   arguments: [ { groups: [ "store" ] } ]
        tags:      [ { name: "api.resource" } ]
    resource.location:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\Location" ]
        tags:      [ { name: "api.resource" } ]          
    resource.store_type:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\StoreType" ]
        tags:      [ { name: "api.resource" } ]
    resource.zone:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\Zone" ]
        tags:      [ { name: "api.resource" } ]
    resource.zone_type:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\ZoneType" ]
        tags:      [ { name: "api.resource" } ]
    resource.device:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\Device" ]
        tags:      [ { name: "api.resource" } ]
    resource.device_type:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\DeviceType" ]
        tags:      [ { name: "api.resource" } ]
    resource.product:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\Product" ]
        tags:      [ { name: "api.resource" } ]
    resource.rfid_log:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\RfidLog" ]
        tags:      [ { name: "api.resource" } ]
    resource.rfid_log_type:
        parent:    "api.resource"
        arguments: [ "RfidBundle\Entity\\RfidLogType" ]
        tags:      [ { name: "api.resource" } ]
        
    store_event_listener:
        class: "RfidBundle\EventListener\StoreEventListener"
        arguments: [ @doctrine ]
        tags:  [ { name: "kernel.event_listener", event: "api.post_create", method: "onPostCreate" } ]
        
    event_listener.rfid_log:
        class:     "RfidBundle\EventListener\RfidLogEventListener"
        arguments: [ @doctrine ]
        tags:
            - { name: "kernel.event_listener", event: "api.pre_create", method: "onPreCreate"  }

#Missing service to make sure that only the right retailers are showing
    event_listener.doctrine.retailer_filter_manager:
        class: "RfidBundle\EventListener\RetailerFilterManager"
        arguments: [ "@doctrine.orm.entity_manager", "@security.token_storage", "@security.authorization_checker" ]
        tags:
            - { name: "kernel.event_listener", event: "kernel.request" }
            
    validator.valid_selected_retailer:
        class: RfidBundle\Validator\Constraints\ValidSelectedRetailerValidator
        arguments: [ "@security.token_storage", "@security.authorization_checker" ]
        tags:
            - { name: validator.constraint_validator, alias: valid_selected_retailer }
            
            

#   Used to add the roles in the authentification web service
    event_listener.authentication_success_listener:
        class: "RfidBundle\EventListener\AuthenticationSuccessListener"
        tags:
            - { name: "kernel.event_listener", event: "lexik_jwt_authentication.on_authentication_success", method: "onAuthenticationSuccessResponse" }